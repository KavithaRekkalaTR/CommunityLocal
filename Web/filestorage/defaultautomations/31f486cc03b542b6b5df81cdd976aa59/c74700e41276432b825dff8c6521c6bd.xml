<?xml version="1.0" encoding="utf-8"?>
<automations>
  <automation name="${resource:Title}" version="11.0.0.0" description="${resource:Description}" id="c74700e41276432b825dff8c6521c6bd" executeAsServiceUser="true" isSingleton="false" hostId="94e30ae53ec54de284a1606a4d914c1b" trigger="Event" lastModified="2019-11-16 00:02:58Z" provider="31f486cc-03b5-42b6-b5df-81cdd976aa59">
    <events>
      <event key="reviewablecontent.afterapprove" />
      <event key="reviewablecontent.aftercreate" />
      <event key="reviewablecontent.afterdeny" />
    </events>
    <executionScript language="JavaScript"><![CDATA[// ensure that the content is managed by this automation (events are generic, but 
// this automation instance manages a single application/content type)
if (context_v2_automationTrigger.Arguments.ApplicationId != context_v1_reviewWorkflow.ApplicationId 
    || context_v2_automationTrigger.Arguments.ContentTypeId != context_v1_reviewWorkflow.ContentTypeId) {
    return;
}

// attempt to load the privileged version of the reviewable content from the private API
var reviewableContent = context_v1_reviewWorkflow.Get(context_v2_automationTrigger.Arguments.Id);
if (!reviewableContent || reviewableContent.HasErrors()) {
    return;
}

var config = {};
try {
    config = JSON.parse(core_v2_widget.GetCustomValue('reviewProcess', ''));
} catch (e) {
    config = {};
}

var STATE = 'state',
    STATE_REVISION = 'Revision',
    STATE_REVIEW = 'Review',
    PHASEID = 'phaseid'

function getPhase(phaseId) {
    if (config.phases) {
        for (var i = 0; i < config.phases.length; i++) {
            if (config.phases[i].id == phaseId) {
                return config.phases[i];
            }
        }
    }
    
    return null;
}

function getProgressHtml(currentPhaseId) {
    var html = [], i, found = false;
    
    if (config.phases && config.phases.length > 0) {
        html.push('<style>');
        html.push(core_v2_widget.RenderFile('progress.css'));
        html.push('</style>');
        
        html.push('<div class="workflow-progress">');
        
        for (i = 0; i < config.phases.length; i++) {
            if (config.phases[i].id == currentPhaseId) {
                found = true;
                html.push('<div class="workflow-stage current">');
            } else if (!found) {
                html.push('<div class="workflow-stage complete">');
            } else {
                html.push('<div class="workflow-stage">');
            }
            
            html.push(core_v2_encoding.HtmlEncode(config.phases[i].name));
            html.push('</div>');
        }
      
        html.push('</div>');
    }
    
    return html.join('');
}

function getNextPhase(currentPhaseId) {
    var found = false, i;
    
    if (!config.phases || config.phases.length == 0) {
        return null;
    }
    
    for (i = 0; i < config.phases.length; i++) {
        if (found) {
            return config.phases[i];
        } else if (config.phases[i].id == currentPhaseId) {
            found = true;
        }
    }
    
    if (found) {
        return null;
    } else {
        return config.phases[0];
    }
}

function getReviewUserIds(phase) {
    var reviewUserIds = [], user, role, users, i, j;
    
    if (phase && phase.reviewers) {
        if (phase.reviewers.users) {
            for (i = 0; i < phase.reviewers.users.length; i++) {
                user = core_v2_user.Get({ Id: phase.reviewers.users[i].id });
                if (user != null && !user.HasErrors()) {
                    if (reviewUserIds.indexOf(user.Id) < 0)
                        reviewUserIds.push(user.Id);
                }
            }
        }
        
        if (phase.reviewers.roles) {
            for (i = 0; i < phase.reviewers.roles.length; i++) {
                role = core_v2_role.Get(phase.reviewers.roles[i].id);
                if (role != null && !role.HasErrors()) {
                    users = core_v2_user.List({ 
                       PageIndex: 0,
                       PageSize: 200,
                       RoleId: role.Id,
                       IncludeHidden: true
                    });
                    if (users && !users.HasErrors()) {
                        for (j = 0; j < users.Count; j++) {
                            if (!users[j].IsSystemAccount && reviewUserIds.indexOf(users[j].Id) < 0)
                                reviewUserIds.push(users[j].Id);
                        }
                    }
                }
            }
        }
    }
    
    return reviewUserIds;
}

function assignForReview(currentPhaseId, fromRevision) {

    var nextPhase, currentPhase;
    if (fromRevision) {
        currentPhaseId = null;
    } 
    nextPhase = getNextPhase(currentPhaseId);
    currentPhase = getPhase(currentPhaseId);

    var reviewUserIds = getReviewUserIds(nextPhase);
    if (nextPhase == null) {
        // no phases or this is the last phase, publish
        var content = context_v1_reviewWorkflow.Publish(reviewableContent.Id);
        if (content && !content.HasErrors()) {
            if (currentPhaseId || fromRevision) {
                notifyOfPublication(content);
            }

            var state = {};
            state[STATE] = STATE_REVIEW;
            state[PHASEID] = currentPhaseId

            context_v1_reviewWorkflow.Update(reviewableContent.Id, {
                AutomationState: state,
                DenialOptionsXml: core_v2_widget.RenderFile('review-denial-options.xml'),
                ApprovalOptionsXml: '',
                Status: getProgressHtml('') + core_v2_language.FormatString(core_v2_language.GetResource('ReviewStatus_Published'), {
                    title: (content && !content.HasErrors()) ? content.HtmlName('Web') : reviewableContent.Title,
                    url: (content && !content.HasErrors()) ? content.Url : ''
                })
            });
        } else if (content && content.HasErrors()) {
            context_v1_reviewWorkflow.Error(reviewableContent.Id, content.Errors.get_Item(0).Message);
        }
    } else if (reviewUserIds.length == 0) {
        // no reviewers at this phase, move to the next phase
        assignForReview(nextPhase.id, fromRevision);
    } else {
        var status = getProgressHtml(nextPhase.id);
        var approveToPhase = getNextPhase(nextPhase.id);
        if (fromRevision) {
            if (approveToPhase == null) {
                status += core_v2_language.GetResource('ReviewStatus_Reviewers_FromRevision');
            } else {
                status += core_v2_language.FormatString(core_v2_language.GetResource('ReviewStatus_Reviewers_FromRevision_WithNextPhase'), {
                   nextphasename: core_v2_encoding.HtmlEncode(approveToPhase.name) 
                });
            }
        } else if (currentPhase) {
            if (approveToPhase == null) {
                status += core_v2_language.FormatString(core_v2_language.GetResource('ReviewStatus_Reviewers_FromPhase'), {
                   phasename: core_v2_encoding.HtmlEncode(currentPhase.name)
                });
            } else {
                status += core_v2_language.FormatString(core_v2_language.GetResource('ReviewStatus_Reviewers_FromPhase_WithNextPhase'), {
                   phasename: core_v2_encoding.HtmlEncode(currentPhase.name),
                   nextphasename: core_v2_encoding.HtmlEncode(approveToPhase.name) 
                });
            }
        } else {
            if (approveToPhase == null) {
                status += core_v2_language.GetResource('ReviewStatus_Reviewers')
            } else {
                status += core_v2_language.FormatString(core_v2_language.GetResource('ReviewStatus_Reviewers_WithNextPhase'), {
                    nextphasename: core_v2_encoding.HtmlEncode(approveToPhase.name) 
                });
            }
        }
        
        var state = {};
        state[STATE] = STATE_REVIEW;
        state[PHASEID] = nextPhase.id;
        
        // assign it to the configured reviewers
        context_v1_reviewWorkflow.Update(reviewableContent.Id, {
            Assignees: reviewUserIds,
            AutomationState: state,
            DenialOptionsXml: core_v2_widget.RenderFile('review-denial-options.xml'),
            ApprovalOptionsXml: '',
            Status: status
        });
    }
}

function assignForRevision(currentPhaseId, revisionNotes) {
    
    var phase = getPhase(currentPhaseId);
    var phaseName;
    if (phase) {
        phaseName = core_v2_encoding.HtmlEncode(phase.name);
    }
    if (!phaseName) {
        phaseName = core_v2_language.GetResource('PhaseName_Unknown');
    }
    
    var status = '';
    if (revisionNotes && revisionNotes.length > 0) {
        status = core_v2_language.FormatString(core_v2_language.GetResource('ReviewStatus_AuthorRevision_WithNotes'), {
            revisionnotes: revisionNotes,
            phasename: phaseName
        });
    } else {
        status = core_v2_language.FormatString(core_v2_language.GetResource('ReviewStatus_AuthorRevision'), {
            phasename: phaseName
        });
    }
    
    var state = {};
        state[STATE] = STATE_REVISION;
        state[PHASEID] = '';
    
    // assign to the author to revise
    reviewableContent = context_v1_reviewWorkflow.Update(reviewableContent.Id, {
        Assignees: reviewableContent.Author.Id,
        AutomationState: state,
        DenialOptionsXml: '',
        ApprovalOptionsXml: '',
        Status: status
    });
    
    if (reviewableContent && !reviewableContent.HasErrors()) {
        notifyOfRevisionRequest(revisionNotes);
    }
}

function notifyOfPublication(content) {
    
    var data = {
        title: reviewableContent.Title,
        url: content.Url,
        contenttypename: (core_v2_contentType.Get(reviewableContent.ContentTypeId).Name || '??').toLowerCase()
    };
    
    core_v2_email.Send(
        core_v2_language.FormatString(core_v2_language.GetResource('Notification_Publish_Subject'), data), 
        core_v2_language.FormatString(core_v2_language.GetResource('Notification_Publish_Body'), data), 
        {
            ToUserId: reviewableContent.Author.Id
        });
}

function notifyOfDeletion() {
    var data = {
        title: reviewableContent.Title,
        contenttypename: (core_v2_contentType.Get(reviewableContent.ContentTypeId).Name || '??').toLowerCase()
    };
    
    core_v2_email.Send(
        core_v2_language.FormatString(core_v2_language.GetResource('Notification_Delete_Subject'), data), 
        core_v2_language.FormatString(core_v2_language.GetResource('Notification_Delete_Body'), data), 
        {
            ToUserId: reviewableContent.Author.Id
        });
}

function notifyOfRevisionRequest(revisionNotes) {
    var data = {
        title: reviewableContent.Title,
        revisionnotes: revisionNotes && revisionNotes.length > 0 ? revisionNotes : core_v2_language.GetResource('Notification_EmptyRevisionNotes'),
        contenttypename: (core_v2_contentType.Get(reviewableContent.ContentTypeId).Name || '??').toLowerCase()
    };
    
    core_v2_email.Send(
        core_v2_language.FormatString(core_v2_language.GetResource('Notification_RevisionRequested_Subject'), data), 
        core_v2_language.FormatString(core_v2_language.GetResource('Notification_RevisionRequested_Body'), data), 
        {
            ToUserId: reviewableContent.Author.Id
        });
}

if (context_v2_automationTrigger.Event == 'AfterCreate') {
    
    // when content is created, assign it to be reviewed
    assignForReview(null, false);
    
} else if (context_v2_automationTrigger.Event == 'AfterApprove') {
    
    if (reviewableContent.AutomationState.Value(STATE) == STATE_REVISION && context_v2_automationTrigger.Arguments.UserId == reviewableContent.Author.Id) {
        // the author revised the content, reassign to reviewers
        assignForReview(reviewableContent.AutomationState.Value(PHASEID), true);
    } else {
        // approved by an assignee, assign to the next phase
        assignForReview(reviewableContent.AutomationState.Value(PHASEID), false);
    }
} else if (context_v2_automationTrigger.Event == 'AfterDeny') {
    
    if (reviewableContent.AutomationState.Value(STATE) == STATE_REVISION && context_v2_automationTrigger.Arguments.UserId == reviewableContent.Author.Id) {
        // the author has denied the content, delete it
        var result = context_v1_reviewWorkflow.Delete(reviewableContent.Id);
        if (result && result.HasErrors()) {
            context_v1_reviewWorkflow.Error(reviewableContent.Id, result.Errors.get_Item(0).Message);
        }
    } else if (context_v2_automationTrigger.Arguments.Options.GetBool('allowRevision')) {
        // a reviewer has denied the content but revisions are allowed, assign back to the author for revision with notes
        var revisionNotes = context_v2_automationTrigger.Arguments.Options.GetHtml('revisionNotes');
        assignForRevision(reviewableContent.AutomationState.Value(PHASEID), revisionNotes);
    } else {
        // a reviewer has denied the content without allowing revision, delete it
        var result = context_v1_reviewWorkflow.Delete(reviewableContent.Id);
        if (result && !result.HasErrors()) {
            notifyOfDeletion();

            var state = {};
            state[STATE] = STATE_REVIEW;
            state[PHASEID] = reviewableContent.AutomationState.Value(PHASEID);
            
            context_v1_reviewWorkflow.Update(reviewableContent.Id, {
                AutomationState: state,
                DenialOptionsXml: core_v2_widget.RenderFile('review-denial-options.xml'),
                ApprovalOptionsXml: '',
                Status: getProgressHtml('') + core_v2_language.GetResource('ReviewStatus_Deleted')
            });
        } else if (result && result.HasErrors()) {
            context_v1_reviewWorkflow.Error(reviewableContent.Id, result.Errors.get_Item(0).Message);
        }
    }
}]]></executionScript>
    <configuration><![CDATA[<propertyGroup id="options" labelResourceName="Options">
    <property id="reviewProcess" dataType="custom" defaultValue="" labelResourceName="ReviewProcess" descriptionResourceName="ReviewProcess_Description" template="propertytemplate-reviewprocess.vm" />
</propertyGroup>]]></configuration>
    <languageResources><![CDATA[<language key="en-us">
  <resource name="AddPhase">Add review phase</resource>
  <resource name="Apply">Apply</resource>
  <resource name="DefaultPhaseName">Phase {id}</resource>
  <resource name="Delete_Confirm">Are you sure you want to remove this review phase?</resource>
  <resource name="Description">Enables reviewing content using one or more configurable review phases.</resource>
  <resource name="Edit">Edit</resource>
  <resource name="Edit_PhaseName">Phase name</resource>
  <resource name="Edit_PhaseName_Description">This is the name that will be used to identify and communicate progress through the review process.</resource>
  <resource name="Edit_Reviewers">Reviewers</resource>
  <resource name="Edit_Reviewers_Description">Select one or more members or roles to assign to review content in this phase.</resource>
  <resource name="Edit_Reviewers_NoUsersOrRolesFound">No matching users or roles were found.</resource>
  <resource name="Field_AllowRevision">Allow the author revise their content</resource>
  <resource name="Field_AllowRevision_Description">If enabled, the author will be provided with your revision notes and will be allowed to edit their content and resubmit it for review, otherwise, the content will be scheduled to be deleted.</resource>
  <resource name="Field_RevisionNotes">Revision notes</resource>
  <resource name="Field_RevisionNotes_Description">Provide any notes that you'd like to share with the author when they revise this content.</resource>
  <resource name="MoveDown">Move down</resource>
  <resource name="MoveUp">Move up</resource>
  <resource name="Notification_Delete_Body">&lt;p&gt;Your {contenttypename}, "{title}," was denied by reviewers and will not be published.&lt;/p&gt;</resource>
  <resource name="Notification_Delete_Subject">Denied: "{title}"</resource>
  <resource name="Notification_EmptyRevisionNotes">No revision notes were provided.</resource>
  <resource name="Notification_Publish_Body">&lt;p&gt;Your {contenttypename}, &lt;a href="{url}"&gt;"{title}"&lt;/a&gt;, has been published.&lt;/p&gt;</resource>
  <resource name="Notification_Publish_Subject">Published: "{title}"</resource>
  <resource name="Notification_RevisionRequested_Body">&lt;p&gt;Your {contenttypename}, "{title}," has been reviewed but revisions have been requested. You can revise the {contenttypename} within the moderation queue and resubmit it. &lt;/p&gt;{revisionnotes}</resource>
  <resource name="Notification_RevisionRequested_Subject">Revision Requested: "{title}"</resource>
  <resource name="Options">Options</resource>
  <resource name="Remove">Remove</resource>
  <resource name="ReviewProcess">Reviewers and review process</resource>
  <resource name="ReviewProcess_Description">The review process consists of one or more phases. At each phase, one or more members or roles are assigned to approve or deny new or modified content. When content leaves one phase, it moves to the next. When all phases are passed, the new or edited content is published. If any phase fails, the new or edited content will be deleted.</resource>
  <resource name="ReviewStatus_AuthorRevision">&lt;p&gt;Reviewers in the '{phasename}' phase have requested that you revise this content. When you have completed editing the content, click 'Approve' to resubmit for review. If you would like to abandon this content, click 'Deny'.&lt;/p&gt;</resource>
  <resource name="ReviewStatus_AuthorRevision_WithNotes">&lt;p&gt;Reviewers in the '{phasename}' phase have requested that you revise this content. When you have completed editing the content, click 'Approve' to resubmit for review. If you would like to abandon this content, click 'Deny'. The reviewer provided the following revision notes:&lt;/p&gt;{revisionnotes}</resource>
  <resource name="ReviewStatus_Deleted">&lt;p&gt;This content has been deleted.&lt;/p&gt;</resource>
  <resource name="ReviewStatus_Published">&lt;p&gt;This content has been published as &lt;a href="{url}"&gt;"{title}"&lt;/a&gt;.&lt;/p&gt;</resource>
  <resource name="ReviewStatus_Reviewers">&lt;p&gt;'Approve' will publish this content. 'Deny' can be used to request revisions or delete this change.&lt;/p&gt;</resource>
  <resource name="ReviewStatus_Reviewers_FromPhase">&lt;p&gt;'Approve' will publish this content. 'Deny' can be used to request revisions or delete this change.&lt;/p&gt;</resource>
  <resource name="ReviewStatus_Reviewers_FromPhase_WithNextPhase">&lt;p&gt;'Approve' will move this content be the '{nextphasename}' phase. 'Deny' can be used to request revisions or delete this change.&lt;/p&gt;</resource>
  <resource name="ReviewStatus_Reviewers_FromRevision">&lt;p&gt;Revisions have been made by the author, as requested. 'Approve' will publish this content. 'Deny' can be used to request revisions or delete this change.&lt;/p&gt;</resource>
  <resource name="ReviewStatus_Reviewers_FromRevision_WithNextPhase">&lt;p&gt;Revisions have been made by the author, as requested. 'Approve' will move this content to the '{nextphasename}' phase. 'Deny' can be used to request revisions or delete this change.&lt;/p&gt;</resource>
  <resource name="ReviewStatus_Reviewers_WithNextPhase">&lt;p&gt;'Approve' will move this content be the '{nextphasename}' phase. 'Deny' can be used to request revisions or delete this change.&lt;/p&gt;</resource>
  <resource name="Title">Phase-based Review</resource>
  <resource name="UserOrRoleLookUp_Role">Role</resource>
  <resource name="View_ReviewedBy">Reviewed by {reviewers}</resource>
  <resource name="View_ReviewedBy_NoOne">no one</resource>
</language>]]></languageResources>
    <files>
      <file name="callback-find-usersorroles.vm" />
      <file name="callback-load-usersandroles.vm" />
      <file name="progress.css" />
      <file name="propertytemplate-reviewprocess.vm" />
      <file name="propertytemplate-reviewprocess-ui.js" />
      <file name="propertytemplate-reviewprocess-ui.less" />
      <file name="review-denial-options.xml" />
    </files>
  </automation>
</automations>